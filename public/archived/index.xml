<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archiveds on cavefxa</title>
    <link>https://cavefxa.com/archived/</link>
    <description>Recent content in Archiveds on cavefxa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Sep 2021 13:04:00 +0200</lastBuildDate><atom:link href="https://cavefxa.com/archived/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Symbolic Execution with Angr: pt. 2 Usage Introduction</title>
      <link>https://cavefxa.com/archived/angr1/</link>
      <pubDate>Wed, 29 Sep 2021 13:04:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/angr1/</guid>
      <description>Simple usage import angr import claripy When you&amp;rsquo;re playing with angr, inevitably at the beginning you&amp;rsquo;ll have to load a binary of some form, you can do this the following way:
project_name = angr.Project(&amp;#34;./&amp;lt;binary_name&amp;gt;&amp;#34;) Now angr works by using a lot of states which it steps through and investigates. To load our initial state we use the following command:
state = proj.factory.entry_state() There are a few ways to load binaries, as one would imagine.</description>
    </item>
    
    <item>
      <title>Symbolic Execution with Angr: pt. 1 Theoretical Introduction</title>
      <link>https://cavefxa.com/archived/angr0/</link>
      <pubDate>Wed, 29 Sep 2021 12:09:45 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/angr0/</guid>
      <description>What is symbolic execution? One might relate it to symbolic equations from mathematics in school. A few exambles of symbolic equations might be:
a²+b²=c² E=hf F=ma These are examples of symbolic equations. Values are defined based on symbols we call different things. For the symbols we could define constraints, eg. &amp;ldquo;f&amp;rdquo; must be larger than 0. or &amp;ldquo;a&amp;rdquo; is equal to 9.82 N/kg. Thus minimizing the amount of results or outcomes.</description>
    </item>
    
    <item>
      <title>What is format strings? How do they work?</title>
      <link>https://cavefxa.com/archived/format0/</link>
      <pubDate>Wed, 08 Sep 2021 15:33:45 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/format0/</guid>
      <description>Format string: A Mini Study - with challenge This will be a short, and practical walkthrough of the concept &amp;ldquo;format string&amp;rdquo;, with an example of how to solve a format string challenge.
Research and everything format string Format is a pwn task on HackTheBox revolving around the idea of format strings (eg. %s, %d, %p), which is a C feature, that allows a strings to contain both words and variables in one.</description>
    </item>
    
    <item>
      <title>ROPEmporium: badchars 32-bit</title>
      <link>https://cavefxa.com/archived/badchars32/</link>
      <pubDate>Mon, 24 May 2021 19:58:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/badchars32/</guid>
      <description>Writeup of bad characters [badchars] on ROPEmporium Prerequisites: Knowledge from previous challs, XOR (Exclusive Or)
This was a more difficult exploit to create, due to the fact that we had bad characters
As usual I started checking the security settings on the binary provided
cave@noobpwn:~/binexp/ROP-emperium/badchars_32$ checksec badchars32 [*] &amp;#39;/home/cave/binexp/ROP-emperium/badchars_32/badchars32&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) RUNPATH: b&amp;#39;.&amp;#39; We see that there is NX enabled.</description>
    </item>
    
    <item>
      <title>ROPEmporium: write4 32-bit</title>
      <link>https://cavefxa.com/archived/write432/</link>
      <pubDate>Mon, 24 May 2021 19:41:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/write432/</guid>
      <description>Writeup of write four [write4] on ROPEmporium Prerequisites: Basic knowledge of assembly, disassembling tools, the previous challenges, and calling convention
We&amp;rsquo;re told the following: &amp;ldquo;A PLT entry for a function named print_file() exists within the challenge binary, simply call it with the name of a file you wish to read (like &amp;lsquo;flag.txt&amp;rsquo;) as the 1st argument. The &amp;lsquo;flag.txt&amp;rsquo; isn&amp;rsquo;t present in the binary&amp;rdquo;
We need a writeable part of memory, because we need to write the string into the binary.</description>
    </item>
    
    <item>
      <title>ROPEmporium: callme 32-bit</title>
      <link>https://cavefxa.com/archived/callme32/</link>
      <pubDate>Mon, 24 May 2021 14:57:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/callme32/</guid>
      <description>Writeup of callme [callme] on ROPEmporium How do you make consecutive calls to a function from your ROP chain that won&amp;rsquo;t crash afterwards? If you keep using the call instructions already present in the binary your chains will eventually fail, especially when exploiting 32 bit binaries. Consider why this might be the case.
This is the information we&amp;rsquo;re greeted with in the callme challenge.
What we need to do is call the functions &amp;ldquo;callmeone&amp;rdquo;, &amp;ldquo;callmetwo&amp;rdquo;, &amp;ldquo;callmethree&amp;rdquo; all with the same arguments: 0xdeadbeef, 0xcafebabe, 0xd00df00d.</description>
    </item>
    
    <item>
      <title>ROPEmporium: split 32-bit</title>
      <link>https://cavefxa.com/archived/split32/</link>
      <pubDate>Mon, 24 May 2021 14:38:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/split32/</guid>
      <description>Writeup of split [split] on ROPEmporium Prerequisites: Basic knowledge of assembly, disassembling tools, and having solved ret2win for 32bit
Let&amp;rsquo;s start this time by checking the security settings of the binary with checksec.
cave@noobpwn:~/binexp/ROP-emperium/split_32$ checksec split32 [*] &amp;#39;/home/cave/binexp/ROP-emperium/split_32/split32&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) So NX is enabled, this means that we can&amp;rsquo;t just put shellcode on the stack and return to it.</description>
    </item>
    
    <item>
      <title>ROPEmporium: ret2win 32-bit</title>
      <link>https://cavefxa.com/archived/ret2win32/</link>
      <pubDate>Mon, 24 May 2021 14:20:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/archived/ret2win32/</guid>
      <description>Writeup of return to win [Ret2win] on ROPEmporium Prerequisites: Basic knowledge of assembly and disassembling tools
[Note: Main difference between 32-bit and 64-bit is that the arguments are passed on the stack instead of in registers, and that the sizes of 32-bit and 64-bit addresses are in said order, 4 bytes and 8 bytes of size, reason for the sizes being that is that each byte consists of two nibbles each of which has 4 bits.</description>
    </item>
    
  </channel>
</rss>
