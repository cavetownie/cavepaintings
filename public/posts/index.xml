<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cavefxa</title>
    <link>https://cavefxa.com/posts/</link>
    <description>Recent content in Posts on cavefxa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2025 15:06:00 +0200</lastBuildDate><atom:link href="https://cavefxa.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reverse engineering the license generation of an old RPG game</title>
      <link>https://cavefxa.com/posts/babys-first-keygen/</link>
      <pubDate>Tue, 28 Jan 2025 15:06:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/babys-first-keygen/</guid>
      <description>Table of Contents Preface The problem Initial reversing Reversing the license checker Level 1 Level 2 Level 3 Level 4 Item achieved: Hook of joy Conclusion Preface During my exam period this semester, I did everything I could to avoid preparing. Included trying to find 0-days in a router, sleeping late, and watching YouTube. I recently discovered a channel, that has content, I really enjoy, super concise, straight to the point, and educational.</description>
    </item>
    
    <item>
      <title>Snapcast (v0.27.0) - CVE-2023-52261: JSON RPC to RCE!</title>
      <link>https://cavefxa.com/posts/snapcast-json-rpc-to-rce/</link>
      <pubDate>Mon, 27 Nov 2023 19:20:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/snapcast-json-rpc-to-rce/</guid>
      <description>Table of Contents Preface Background information about Snapcast What is Snapcast Server client relationship How is it playing? How is it synchronizing? Exploitation Finding the bug Proof-of-Concept Script Preface Once upon a time, I went to the Danish hacking festival Bornhack. While there, fun was had, things were hacked, and wine was drunk. In one of the larger tents, that worked as a sort of meeting point, some people had set up an IoT streaming service, that allowed everyone to install a client on their phone, and listen to the same music, in camp, out of camp, and it was very synchronized!</description>
    </item>
    
    <item>
      <title>Samsung GT-S7580 - Zero to Root!</title>
      <link>https://cavefxa.com/posts/gt-s7580-zero-to-root/</link>
      <pubDate>Mon, 29 May 2023 15:33:45 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/gt-s7580-zero-to-root/</guid>
      <description>Preface This blog post, will be discussing how I did vulnerability research on an older Samsung phone (GT-S7580) - specifically the model GT-S7580. I had not done ARM exploitation, rooting, and barely even any kernel exploitation before this. I will go through what I ended up learning and how I went from zero to root.
Getting started Connecting to the phone Connecting to the phone in some way is crucial otherwise how will you interface with the phone?</description>
    </item>
    
    <item>
      <title>ZyXEL P-2601HN - Unauthenticated to root!</title>
      <link>https://cavefxa.com/posts/zyxel2601/</link>
      <pubDate>Sun, 26 Mar 2023 15:33:45 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/zyxel2601/</guid>
      <description>Preface In this blog post, I will be going through how I, along with a few of my friends, spent the previous sunday, hacking an old router, and getting a full exploit, that takes an attacker from unauthenticated LAN to root on the router. Hope you enjoy!
Getting started Picking a target As with my last router target, this one was also picked up from a thrift store. I recall spending around 5$ on it, and that’s certainly worth a day of fun hacking.</description>
    </item>
    
    <item>
      <title>TP-Link WR720N - CVE-2023-24362(3): UART, and code execution!</title>
      <link>https://cavefxa.com/posts/router-hacking2/</link>
      <pubDate>Sun, 12 Mar 2023 19:41:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/router-hacking2/</guid>
      <description>Connecting to UART To get UART, we need some kind of way to connect to it, there’s different ways one can do this, using different serial communication programs. To name a few Minicom, Putty, or Screen. We’ll be using screen in this post. Now since UART is a sort of communication protocol between two devices, they need to understand that they’re speaking the same language, just like we agree on grammar and syntax for spoken/written languages.</description>
    </item>
    
    <item>
      <title>TP-Link WR720N - CVE-2023-24362(2): Bug, mans best friend!</title>
      <link>https://cavefxa.com/posts/router-hacking1/</link>
      <pubDate>Sat, 18 Feb 2023 15:49:35 +0100</pubDate>
      
      <guid>https://cavefxa.com/posts/router-hacking1/</guid>
      <description>Preface In the last post, we looked at the firmware, trying to get something we could analyze. We ended up writing a loader using the Binary Ninja scripting API, and finally getting something to reverse engineer. Now our search for bugs begins. In this post I will be playing around with the routers web UI, and then reverse engineering the firmware searching for bugs.
Bug hunting Getting the lay of the land I started by playing around with the webportal, which we concluded in the first post was over at http://192.</description>
    </item>
    
    <item>
      <title>TP-Link WR720N - CVE-2023-24362(1): Loading...</title>
      <link>https://cavefxa.com/posts/router-hacking0/</link>
      <pubDate>Fri, 17 Feb 2023 11:37:00 +0100</pubDate>
      
      <guid>https://cavefxa.com/posts/router-hacking0/</guid>
      <description>Preface This blog post, and the ones following it, will be discussing how I did vulnerability research on a router - specifically the model TL-WR720N. I have never done embedded vulnerability research before this, and that might be reflected in the post. The posts will be chronological from beginning to end. Enjoy! (Also no, ChatGPT did not write this)
Getting started Picking a target To begin doing embedded vulnerability research, it&amp;rsquo;s quite nice to have a lot of tools.</description>
    </item>
    
    <item>
      <title>PWS_Dashboard - CVE-2022-45291: &#34;badweather&#34;</title>
      <link>https://cavefxa.com/posts/cve-2022-45291/</link>
      <pubDate>Tue, 20 Dec 2022 19:49:35 +0100</pubDate>
      
      <guid>https://cavefxa.com/posts/cve-2022-45291/</guid>
      <description>Some weeks ago now, my good friend Mikbrosim, and I were sitting a sunday evening looking for something we could hack. After searching the internet for a while, I found some really old looking site. The site had some webcam, of what looked like a private backyard (publicly exposed of course), and some sort of weather dashboard. Looking around on the site a bit, it seemed really odd, and broken; however nothing was to be found, and we obviously didn&amp;rsquo;t want to pentest something we didn&amp;rsquo;t have permissions to.</description>
    </item>
    
    <item>
      <title>FE-CTF (HackingFromEstonia): My First Browserpwn</title>
      <link>https://cavefxa.com/posts/first-browser-pwn/</link>
      <pubDate>Mon, 12 Dec 2022 17:17:45 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/first-browser-pwn/</guid>
      <description>Introduction &amp;ldquo;My first browser pwn&amp;rdquo;, was a challenge I solved with the team HackingFromEstonia, during the physical on-site finals at Frederiksberg Slot, at the event FE-CTF hosted by FE (Danish Defence Intelligence Service).
The challenge is created around the JavaScriptCore (JSC). The JSC is the JavaScript engine, used by WebKit implementations such as Safari, BlackBerry browser, Kindle e-book, and more. Note that it&amp;rsquo;s not the same as V8, which is developed by Google, whereas JSC is developed by Apple.</description>
    </item>
    
    <item>
      <title>FE-CTF (HackingFromEstonia): Finals and Quals Writeups</title>
      <link>https://cavefxa.com/posts/fe-ctf/</link>
      <pubDate>Mon, 28 Nov 2022 21:49:35 +0100</pubDate>
      
      <guid>https://cavefxa.com/posts/fe-ctf/</guid>
      <description>Qualifiers - Dig1 A lot of older routers, have this thing in settings that allows your to ping routers. This input is usually just smacked directly into bash, and then executed. Knowing this, we can try command injection with something as simple as:
127.0.0.1; cat /flag flag{do people still use php?}
Qualifiers - Dig2 This is the same type of challenge, except now we don&amp;rsquo;t have spaces. Googling this issue: https://unix.</description>
    </item>
    
    <item>
      <title>pwn2win 2021: &#34;Oldschool Adventures - Apple II&#34;</title>
      <link>https://cavefxa.com/posts/oldschool-adventures/</link>
      <pubDate>Tue, 01 Jun 2021 17:17:45 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/oldschool-adventures/</guid>
      <description>Oldschool Adventures - Description Dockerfiles: Oldschool_Adventure
Challenge description:
We found this Rhiza&amp;rsquo;s Government Server, and we need to access it! It runs an Apple II emulator and accepts codes in Applesoft BASIC. If the result of your code generates a valid QR Code standard (not micro QR), it will be read and the content will be executed as a shell command on the Linux system. A very interesting way to interact with a server, don&amp;rsquo;t you think?</description>
    </item>
    
    <item>
      <title>Adventures in Heap: Malloc, Free, and Fastbin Dup</title>
      <link>https://cavefxa.com/posts/heap-adventures0/</link>
      <pubDate>Tue, 25 May 2021 18:20:00 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/heap-adventures0/</guid>
      <description>Heap is like the wild west of binary exploitation in my opinion, or perhaps more like an alien, no one knows what is happening (atleast I don&amp;rsquo;t). A lot of CTF pwn challenges these days are heap exploitations, even the simpler ones, so let&amp;rsquo;s learn some heap. Let&amp;rsquo;s get started.
Malloc Malloc is a function in C, which can handle the allocation of memory. Which is why it&amp;rsquo;s called m alloc [memory alloc].</description>
    </item>
    
    <item>
      <title>What&#39;s a stack, and how does it overflow?</title>
      <link>https://cavefxa.com/posts/stack-overflow/</link>
      <pubDate>Sun, 23 May 2021 18:03:05 +0200</pubDate>
      
      <guid>https://cavefxa.com/posts/stack-overflow/</guid>
      <description>Stack Memory is divided into three regions: Data, Text, and Stack
In the data segment one usually finds strings or other statically created variables. In a C program, these are variables that reside outside of functions, and therefore are static.
In the text segment one will find compiled C code turnt into machine code, machine code is not assembly, but directly consiting of binaries which can be executed by the computer, while assembly is a low-level programming language, that first requires assembling to be converted into machine code.</description>
    </item>
    
  </channel>
</rss>
